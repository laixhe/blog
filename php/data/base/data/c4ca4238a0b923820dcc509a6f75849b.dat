<p>&nbsp; &nbsp; &nbsp; 主要讲解计算机的原码、反码、补码，如有不对的地方请各位牛人帮忙指正! 希望本文对大家学习计算机基础有所帮助!</p>
<p>下面的原码、反码、补码的存储主要是解决两下问题：<br> 1、<span style="background-color:#ff8c00">为了解决负数</span><br> 2、<span style="background-color:#ff8c00">计算机只会加不会减</span></p>
<p><strong>### 原码 -&nbsp;原始的二进制</strong></p>
<p>1、数字分为正负数<br> 2、左边为高位，右边为低位<br> 3、最高位为符号位：0代表为正数，1代表为负数</p>
<p>+1 ：0000 0001<br> - 1&nbsp;：1000 0001</p>
<p><strong>原码存储导致了2个问题：</strong></p>
<p><strong>1、</strong>0有两种存储方式<br> +0 ：0000 0000<br> - 0&nbsp;：1000 0000</p>
<p><strong>2、</strong>正数和负数相加，结果不正确(因为计算机只会加不会减)<br> 1-1=1+-1<br> +1 ： &nbsp;0000 0001<br> - 1&nbsp;： &nbsp;1000 0001<br> 相加&nbsp;：1000 0010&nbsp; &nbsp;结果是：-2</p>
<p><strong>### 反码 - 为了计算 ·补码·用的</strong></p>
<p>1、正数的原码和反码是一样的<br> 2、先求原码<br> 3、负数在原码基础上，符号位不变，其它位取反( 0为1，1为0)</p>
<p>+1 ：0000 0001<br> - 1&nbsp;：1000 0001<br> 上面是原码，下面是反码<br> +1 ：0000 0001<br> - 1&nbsp;：1111 1110</p>
<p><strong>反码存储导致了2个问题：</strong></p>
<p><strong>1、</strong>0有两种存储方式<br> +0 ：0000 0000<br> - 0&nbsp;：1111 1111</p>
<p><strong>2、</strong>正数和负数相加，结果不正确(因为计算机只会加不会减)<br> 1-1=1+-1<br> +1 ： &nbsp;0000 0001<br> - 1&nbsp;： &nbsp;1111 1110<br> 相加&nbsp;：1111 1111&nbsp; &nbsp;结果是：-0</p>
<p><strong>### 补码 - 在计算机系统中，数值一律用补码来存储(为了解决负数的存储)</strong></p>
<p>1、正数的原码、反码、补码是一样的<br> 2、先得到反码<br> 3、负数反码符号位不动，其他位求反，最后整个数加 1 ，得到补码(也就是反码加 1)</p>
<p>原码<br> +1 ：0000 0001<br> - 1&nbsp;：1000 0001<br> 反码<br> +1 ：0000 0001<br> - 1&nbsp;：1111 1110<br> 补码<br> +1 ：0000 0001<br> - 1&nbsp;：1111 1111<br> 做下减法：1-1=1+-1<br> +1 ： &nbsp;0000 0001<br> - 1&nbsp;： &nbsp;1111 1111<br> 相加&nbsp;：<span style="color:#ff0000"><span style="background-color:#ffa07a">1 </span></span>0000 0000 &nbsp; 结果是：0 (因为一个字节等于八个比特，最高位会被丢弃的)</p>
<p><strong>最后二点注意：</strong></p>
<p>1、十进制是以用户(人)角度来存储的-用的是原码<br> 2、二、八、十六进制是以计算机角度来存储的-用的是补码</p>
<p><strong>总结：</strong></p>
<p>1、二进制的最高位是符号位：0表示正数 1表示负数</p>
<p>2、正数的原码、反码、补码都一样</p>
<p>3、负数的反码<strong>等于</strong>它的原码符号位不变，其它位取反</p>
<p>4、负数的补码<strong>等于</strong>它的反码+1</p>
<p>5、零的反码、补码都是0</p>
<p>6、在计算机运算的时候，都是以补码的方式来运算的</p>